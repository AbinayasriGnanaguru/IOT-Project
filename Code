include <ESP8266WiFi.h>   // For ESP8266
//#include <WiFi.h>        // Use this for ESP32

// WiFi credentials
const char* ssid = "Your_SSID";
const char* password = "Your_PASSWORD";

// Pin configuration
const int ldrPin = A0;       // Analog pin for LDR
const int lightPin = D1;     // Digital pin to control streetlight (LED/Relay)

// Threshold value to decide darkness
int lightThreshold = 500;    // Adjust based on testing

void setup() {
  Serial.begin(115200);
  pinMode(lightPin, OUTPUT);
  digitalWrite(lightPin, LOW);  // Initially off

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP address: ");
Serial.println(WiFi.localIP());
}

void loop() {
  int ldrValue = analogRead(ldrPin); // Read ambient light level
  Serial.print("LDR Value: ");
  Serial.println(ldrValue);

  if (ldrValue < lightThreshold) {
    digitalWrite(lightPin, HIGH);  // Turn ON streetlight
    Serial.println("Streetlight ON");
  } else {
    digitalWrite(lightPin, LOW);   // Turn OFF streetlight
    Serial.println("Streetlight OFF");
  }

  delay(1000);  // Delay for stability
}
package com.example.streetlightmonitor;

import android.os.Bundle;
import android.os.Handler;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity {

    private TextView ldrValueText, statusText;
    private Handler handler = new Handler();

    // Replace these with your actual ThingSpeak Channel ID and Read API Key
    private static final String CHANNEL_ID = "YOUR_CHANNEL_ID";
    private static final String READ_API_KEY = "YOUR_READ_API_KEY";

    private static final String THINGSPEAK_URL =
            "https://api.thingspeak.com/channels/" + CHANNEL_ID + "/feeds/last.json?api_key=" + READ_API_KEY;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ldrValueText = findViewById(R.id.ldrValue);
        statusText = findViewById(R.id.statusValue);

        // Start fetching data repeatedly
        startRepeatingFetch();
    }

    private void startRepeatingFetch() {
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                fetchData();
                handler.postDelayed(this, 5000); // repeat every 5 seconds
            }
        }, 0);
    }

    private void fetchData() {
        new Thread(() -> {
            try {
                URL url = new URL(THINGSPEAK_URL);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");

                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;

                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }

                reader.close();

                JSONObject jsonObject = new JSONObject(response.toString());

                String ldrValue = jsonObject.getString("field1");
                String lightStatus = jsonObject.getString("field2");

                runOnUiThread(() -> {
                    ldrValueText.setText("LDR Value: " + ldrValue);
                    statusText.setText("Light Status: " + lightStatus);
                });

            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }
}
